<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_character_up_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

{
    h_dir = "Stop"; 
    v_dir = "Stop";
    image_speed = 1/3;
    randomize();
    attack = false;
    defense = false;
    lives = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Walking

{
    scr_walk();
    if keyboard_check_released(ord('D')) &amp;&amp; h_dir = "Stop" &amp;&amp; v_dir = "Stop"
        {
        sprite_index = spr_character_right_stand;
        }
    if keyboard_check_released(ord('A')) &amp;&amp; h_dir = "Stop" &amp;&amp; v_dir = "Stop"
        {
        sprite_index = spr_character_left_stand;
        }
    if keyboard_check_released(ord('S')) &amp;&amp; h_dir = "Stop" &amp;&amp; v_dir = "Stop"
        {
        sprite_index = spr_character_down_stand;
        }
    if keyboard_check_released(ord('W')) &amp;&amp; h_dir = "Stop" &amp;&amp; v_dir = "Stop"
        {
        sprite_index = spr_character_up_stand;
        }
        
    switch(v_dir)
        {
        case "Up":
            if collision_point(x,y-8,obj_block,false,true) then break;
            y -= 5;
            sprite_index = spr_character_up;
            break;
            
        case "Down":
        if collision_point(x,y+8,obj_block,false,true) then break;
            y += 5
            sprite_index = spr_character_down;
            
        case "Stop": 
            break;
            
        }
        
    switch(h_dir)
        {
        case "Left":
            if collision_point(x-8,y,obj_block,false,true) then break;
            x -= 5;
            sprite_index = spr_character_left;
            break;
        
        case "Right":
            if collision_point(x+8,y,obj_block,false,true) then break;
            x += 5;
            sprite_index = spr_character_right;
            break;
        
        
        case  "Stop":
            break;
    
        }
    
        
    if mouse_check_button(mb_left) &amp;&amp; !mouse_check_button(mb_right)
        {
        attack = true;  
        switch(v_dir)
            {
                case "Up":
                    sprite_index = spr_character_up_attack;
                    break;
                    
                case "Down":
                    sprite_index = spr_character_down_attack;
                    break;
            }
            
        switch(h_dir)
            {
                case "Left":
                    sprite_index = spr_character_left_attack;
                    break;
                    
                case "Right":
                    sprite_index = spr_character_right_attack;
                    break;
            }
        }  
    else attack = false;  
    if mouse_check_button(mb_right) &amp;&amp; !mouse_check_button(mb_left)
        {
        defense = true;  
        switch(v_dir)
            {
            case "Up": 
                sprite_index = spr_character_up_defend;
                break;
            case "Down": 
                sprite_index = spr_character_down_defend;
                break;
            }
        switch(h_dir)
            {
            case "Left":
                sprite_index = spr_character_left_defend;
                break;
            case "Right":
                sprite_index = spr_character_right_defend;
                break;
             }
        }
    else defense = false;  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_egg">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Egg

{
    with(other)
        {
        effect_create_below(ef_flare,x,y,0,c_yellow);
        instance_destroy();
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_chicken">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chickens

{
    if attack then with(other)
        {
        effect_create_above(ef_explosion,x,y,0,c_gray);
        instance_create(x,y,obj_egg);
        instance_destroy();
        }
        
    if !defense &amp;&amp; !attack
        {
        lives--;
        room_restart();
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="6">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
